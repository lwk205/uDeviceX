set -eu

: ${DBG=0}
prog=u.strt.cp

usg () {
    msg 'u.strt.cp [strt dir] [new strt dir]'
    msg 'copies restart directory'
    msg 'final.* or [biggest timestep].* becomes final.* in [new strt dir]'
    msg 'BUGS: naive logic based on sorting'
    exit
}

msg () { echo >&2 "$*"; }
err () { msg "$prog: $@"; exit 2; }
e   () {
    if test ! "$DBG" = 0; then msg "cmd: $*"; fi
    eval "$@"
}
main ()  { dir "$@"; }
mkdir0 () {
    d="$1"; shift
    e mkdir -p "$d"
    if test ! -d "$d"; then err fail to create "$d"; fi
}

bop_cp () {
    local f t b
    f="$1"; shift; t="$1"; shift
    b=`basename "$t" .bop`
    "${AWK-awk}" -v b="$b" '
      $1 == "DATA_FILE:" { 
         print "DATA_FILE: " b ".values"
         next
      }
      { print }
    ' "$f" > "$t"
}
bopp () { # bop?
    echo "$1" | grep -q '\.bop$'
}
cp0 () {
    local f t
    f="$1"; shift; t="$1"; shift
    if bopp "$f"
    then   bop_cp    "$f" "$t"
    else e     cp -- "$f" "$t"
    fi
}
cp_normal () {
    local d b
    d="$1"; shift; b="$1"; shift
    cp0 "$i/$d/$b" "$o/$d/$b"
}
safe_cp () {
    local d t
    d="$1"; shift
    t="$1"; shift
    if test -f "$t"; then continue; fi
    cp0 "$d" "$t"
}
cp_final () {
    local d b fin trg dest
    d="$1"; shift
    b="$1"; shift
    fin=`get_fin "$b"`
    dest="$i/$d/$b"
    trg="$o/$d/$fin"
    safe_cp "$dest" "$trg"
}
get_fin () {
    echo "$1" | sed 's/^[0-9][0-9]*/final/1'
}

file () {
    local d b
    d="$1"; shift
    b="$1"; shift
    if numfile "$b"
    then cp_final  "$d" "$b"
    else cp_normal "$d" "$b"
    fi
}
numfile () { echo "$1" | grep -q '^[0-9][0-9]*\.'; }

dir ()  {
    local d
    d="$1"
    mkdir0 "$o/$d"
    dir0 "$@";
}
dir0 () {
    local d b
    d="$1"; shift;
    if test ! -d "$i/$d"; then return; fi
    for f in `e ls -rd "$i/$d"/'*'`
    do  if test ! -r "$f"; then continue; fi
	b=`basename "$f"`
	if   test -d "$f"; then dir  "$d/$b"
	elif test -r "$f"; then file "$d" "$b"
	fi
    done
}

if test $# -ne 0 -a "$1" = -h; then usg; fi
if test $# -ne 2; then err need two arguments; fi

i="$1"; shift
o="$1"; shift

if test ! -d "$i"; then err "not a directory '$i'"; fi

main .
