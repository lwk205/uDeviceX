g_big  () {
    safe_cp /scratch/snx1600/lisergey/pachinko/big/sdf.dat sdf.dat
    xs=64 ys=52 zs=56
    geom
}

g_oneA () { # sizes from the file
    safe_cp /scratch/snx1600/lisergey/pachinko/post/sdf.dat sdf.dat
    xs=32 ys=56 zs=60
    geom
}

g_oneB () { # sizes from big sdf
    safe_cp /scratch/snx1600/lisergey/pachinko/post/sdf.dat sdf.dat
    xs=64 ys=52 zs=56
    geom
}

g_cyl () { #
    xs=24 ys=24 zs=24
    tsdf_cyl
    geom
}

g_box () { #
    xs=64 ys=52 zs=56
    tsdf_box
    geom
}

geom () { lx=`ae $nx*$xs` ly=`ae $ny*$ys` lz=`ae $nz*$zs`; }
bop0 () { Bop= ; }
bop1 () { Bop="part_dumps=true force_dumps=true"; }
rbc0 () { Rbc= ;                                  }
rbc1 () { Rbc="rbcs"; plcmt $radius $sc;          }

small  () { nx=7   ny=2 nz=1; g_big; part;  bop0; }
normal () { nx=14  ny=4 nz=1; g_big; part;  bop0; }
big    () { nx=28  ny=8 nz=1; g_big; part;  bop0; }
oneA   () { nx=1   ny=1 nz=1; g_oneA; full; bop1; }
oneB   () { nx=1   ny=1 nz=1; g_oneB; full; bop1; }
cyl    () { nx=1   ny=1 nz=1; g_cyl;  full; bop1; }
box    () { nx=1   ny=1 nz=1; g_box;  full; bop1; }

msg () { printf ': %s\n' "$*" >&2; }

p_lina () { # sets Param
    local A Gamma Rbc Time
    Time="dt=1e-4"
    A="    adpd_b=2.66667  adpd_r=2.66667 adpd_br=2.66667"
    Gamma="gdpd_b=11.5     gdpd_r=5       gdpd_br=8.25"
    Rbc="RBC_PARAMS_LINA DPD_GRAVITY"
    Param="$A $Gamma $Rbc $Time"
}
p_test () { Param=                             ; }

exec0 () { msg "$@"; "$@"; }
safe_cp () {
    # from/to and host
    local f t h

    h=`u.host`
    if test $h != daint; then return; fi

    f="$1"; shift
    t="$1"; shift
    if test ! -f "$f"
    then msg "not a file: $f"
	 exit 1
    fi
    exec0 ln -s "$f" "$t"
}

strt0 () {
    Restart= ;
    u.strtdir . $nx $ny $nz
}

strt1 () {
    local h
    h=`u.host`
    Restart="RESTART=true"
    if test $h = acer; then return; fi
    mkdir -p h5                         # TODO
    cp -r $HOME/strt0      strt
}

ae () { awk 'BEGIN {print '"$@"'}'; }

## fill with RBCs
part () { rx=$lx          ry=`ae $ly/3`   rz=$lz; }
full () { rx=$lx          ry=$ly          rz=$lz; }

safe1 () { u=u/safe; Safe="KL_SYNC CC_SYNC"; }
safe0 () { u=u/x;    Safe= ;}

plcmt () { # uses rx, ry, rz: [r]bc region
    local r fr sc ang
    r="$1"; shift
    fr=0
    sc="$1"; shift
    ang=0.785
    plcmt.ro $rx $ry $rz     $r $fr $sc $ang /dev/null rbcs-ic.txt
}

forceA () { # uses $force
    Force="FORCE_CONSTANT FORCE_PAR_A=$force"
}

forceB () { # uses $v and $shift
    local p
    p=`ae "atan2(-1,$shift)"`
    vx=`ae "$v*cos($p)"`
    vy=`ae "$v*sin($p)"`
    forceB0
}
forceB0 () { # uses $vx $vy
    local a b c
    a="VCON=true VCON_SAMPLE_FREQ=1 VCON_LOG_FREQ=500 VCON_ADJUST_FREQ=1000"
    b="VCON_VX=$vx VCON_VY=$vy"
    c="FORCE_CONSTANT FORCE_PAR_A=0"
    Force="$a $b $c"
}


run () {
    local h
    h=`u.host`
    if test $h = panda
    then u.run     $nx $ny $nz ./udx
    else u.batch   $nx $ny $nz ./udx 08:00:00
    fi
}
