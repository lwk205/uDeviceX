#!/usr/bin/env octave-qf

# usage: <positions stream> | sdf.filter <lo> <hi> <sdf.dat>       > <positions>
#        filters stream of position [x, y, z] based on the level of sdf
#        if sdf(x, y, z) < level     a position goes into output

1;
function read(fn)
  f = fopen(fn);
  read_header(f)
  read_data(f)
  fclose(f);
endfunction

function varargout = fscn(f, fmt) # simpler fscanf
  l = fgets(f);
  [varargout{1:nargout}] = strread(l, fmt);
endfunction

function read_header(f)
  global ex ey ez   nx ny nz
  [ex, ey, ez] = fscn(f, "%f %f %f");
  [nx, ny, nz] = fscn(f, "%d %d %d");
endfunction

function read_data(f)
  global nx ny nz D
  D = fread(f, nx*ny*nz, "float32");
  D = reshape(D, nx, ny, nz);
endfunction

function write_header(f)
  global ex ey ez   nx ny nz
  printf("%g %g %g\n", ex, ey, ez);
  printf("%d %d %d\n", nx, ny, nz);
endfunction

function write()
  global xx yy zz
  dlmwrite(stdout, [xx, yy, zz], ' ');
endfunction

function msg(s); fputs(stderr, s); endfunction
function usg() ; msg("<positions stream> | sdf.filter <level> <sdf.dat>       > <positions>"); exit(); endfunction
function r = eq(a, b); r = strcmp(a, b); endfunction

function read_stream()
  global xx yy zz
  D = dlmread(stdin);
  xx = D(:, 1); yy = D(:, 2); zz = D(:, 3);
endfunction

function e = dbl(e); e = double(e); endfunction

function [x, y, z] = isdf(x, y, z) # get indexes
  global ex ey ez   nx ny nz
  sx = ex/dbl(nx); sy = ey/dbl(ny); sz = ez/dbl(nz); # step
  ox = sx/2 ; oy = sy/2 ; oz = sz/2;                 # origin
  x -= ox; y -= oy; z -= oz;

  x /= sx; y /= sy; z /= sz;
  x = round(x); y = round(y); z = round(z);
endfunction

function s = sdf(x, y, z)
  global nx ny nz D
  BIG = 1e10;
  [x, y, z] = isdf(x, y, z);
  if x < 1 || x > nx; s = BIG; return; endif
  if y < 1 || y > ny; s = BIG; return; endif
  if z < 1 || z > nz; s = BIG; return; endif
  s =  D(x, y, z);
endfunction

function filter(lo, hi)
  global xx yy zz
  n = numel(xx);
  m = 0; # new size
  for i = 1:n
    x = xx(i); y = yy(i); z = zz(i);
    s = sdf(x, y, z);
    if s >= hi; continue; endif
    if s  < lo; continue; endif    
    m += 1; xx(m) = x; yy(m) = y; zz(m) = z;
  endfor
  xx = xx(1:m); yy = yy(1:m); zz = zz(1:m);
endfunction

if eq(argv(){1}, "-h"); usg(); endif
if numel(argv()) != 3;  usg(); endif

lo = str2num(argv(){1});
hi = str2num(argv(){2});
fi  = argv(){3};

read_stream();
read(fi); # sdf
filter(lo, hi);

write();

# TEST: sdf.filter.t0
# lo=-1 hi=1
# sdf=test_data/yplates.dat
# pos=test_data/hex.pos
# sdf.filter $lo $hi $sdf    > fi.out.pos      < $pos
#
