#!/usr/bin/env octave-qf

# usage: sdf.2txt <in.dat>   >   <out.txt>
#        convert to text; x is fastest and z is slowest
#        for iz {for iy {for ix
# Output:
# nx ny nz
# ex ey ez
# w[0]      === D[0,0,0]
# w[1]      === D[1,0,0]
# w[2]      === D[2,0,0]
# ..
# w[n-1]

1;
function read(fn)
  f = fopen(fn);
  read_header(f)
  read_data(f)
  fclose(f);
endfunction

function varargout = fscn(f, fmt) # simpler fscanf
  l = fgets(f);
  [varargout{1:nargout}] = strread(l, fmt);
endfunction

function read_header(f)
  global ex ey ez   nx ny nz
  [ex, ey, ez] = fscn(f, "%f %f %f");
  [nx, ny, nz] = fscn(f, "%d %d %d");
endfunction

function read_data(f)
  global ex ey ez   nx ny nz D
  D = fread(f, nx*ny*nz, "float32");
  D = reshape(D, nx, ny, nz);
endfunction

function write_header(f)
  global ex ey ez   nx ny nz
  printf("%g %g %g\n", ex, ey, ez);
  printf("%d %d %d\n", nx, ny, nz);
endfunction

function write_data()
  global D
  dlmwrite(stdout, D(:));
endfunction

function msg(s); fputs(stderr, s); endfunction
function usg() ; msg("sdf.2txt <in.dat>    >   <out.txt>"); exit(); endfunction
function r = eq(a, b); r = strcmp(a, b); endfunction

fi = argv(){1}
read(fi);
write_header();
write_data();

# TEST: sdf.2txt.t0
# sdf.2txt test_data/yplates.dat  > 3d.out.txt
#
