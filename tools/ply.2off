#!/usr/bin/awk -f

# usage: ply.2off <ply>   >   <off>

function usg(s) {
    msg("usage: ply.2off <ply>     >      <off>")
    exit
}

BEGIN {
    f  = ARGC > 1 ? ARGV[1] : "-"
    read_header(f)
    read_verts(f)
    read_faces(f)

    ne = 0
    write_header()
    write_verts()
    write_faces()
}

function read_header(f) {
    while (getline < f > 0) {
	if ($1 == "element" && $2 == "vertex") nv = $3
	if ($1 == "element" && $2 == "face")   nf = $3
	if ($0 ~ /end_header/) break
    }
}

function read_verts(f,   i) {
    for (i = 0; i < nv; i++) {
	getline < f
	x = $1; y = $2; z = $3
	pack_verts(i)
    }
}

function read_faces(f,   i, k) {
    for (i = 0; i < nf; i++) {
	getline < f
	k = 1; np = $(k++); f1 = $(k++); f2 = $(k++); f3 = $(k++)
	pack_faces(i)
    }
}

function write_header() {
    print "OFF"
    print nv, nf, ne
}

function write_verts(f,   i) {
    for (i = 0; i < nv; i++) {
	unpack_verts(i)
	print x, y, z
    }
}

function write_faces(f,   i) {
    for (i = 0; i < nf; i++) {
	unpack_faces(i)
	print np, f1, f2, f3
    }
}

function shift(  i) { for (i = 2; i < ARGC; i++) ARGV[i-1] = ARGV[i]; ARGC-- }
function msg(s)     { printf "%s\n", s | "cat >&2" }

function   pack_verts(i) { xx[i] =     x; yy[i] =    y;  zz[i] =     z }
function unpack_verts(i) {     x = xx[i];     y = yy[i];     z = zz[i] } 

function   pack_faces(i) { nnp[i] = np;    ff1[i] =     f1; ff2[i] =     f2; ff3[i] =    f3  }
function unpack_faces(i) {     np = nnp[i];    f1 = ff1[i];     f2 = ff2[i];     f3 = ff3[i] }

# TEST: ply.2off.t0
# ply.2off test_data/sphere.ply > sph.out.off 
#
