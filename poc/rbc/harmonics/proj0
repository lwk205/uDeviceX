#!/usr/bin/python2

import sys
from scipy.special import sph_harm as Y
from math import pi, sin, cos

def yre(K, L, p, t): return Y(K, L, p, t).real
def yim(K, L, p, t): return Y(K, L, p, t).imag
def yy(K, L, p, t):
    return yre(K, L, p, t) if K >= 0 else yim(-K, L, p, t)
def from_to(l, h):
    return [l] if l == h else range(l, h + 1)
def shift(): sys.argv.pop(0)
def fst()  : return sys.argv[1]
def msg(s) : sys.stderr.write("%s\n" % s )
def err(s) : msg(s); sys.exit(2)

def read_sph(f):
    X, Y, Z, P, T = 0, 1, 2, 3, 4
    S = []
    f = f.read().splitlines()
    for l in f:
        l = l.split()
        tu = l[P], l[T], l[X], l[Y], l[Z]
        tu = map(float, tu)
        S.append(tu)
    return S

def null():
    for L in from_to(0, Lmax):
        for K in from_to(-L, L):
            C[K, L] = [0, 0, 0]
def proj(p, t, x, y, z):
    X, Y, Z = 0, 1, 2
    for L in from_to(0, Lmax):
        for K in from_to(-L, L):
            k = yy(K, L, p, t)*sin(t)
            C[K, L][X] += x*k
            C[K, L][Y] += y*k
            C[K, L][Z] += z*k
def norm(n):
    X, Y, Z = 0, 1, 2
    k = 2*pi*pi / n
    for L in from_to(0, Lmax):
        for K in from_to(-L, L):
            C[K, L][X] *= k
            C[K, L][Y] *= k
            C[K, L][Z] *= k
def dump():
    X, Y, Z = 0, 1, 2
    for L in from_to(0, Lmax):
        for K in from_to(-L, L):
            c = C[K, L]
            print c[X], c[Y], c[Z]

Lmax = fst(); shift()
try: Lmax = int(Lmax)
except ValueError: err("expecting an integer: %s" % Lmax)
i = fst(); shift()
try:
    with open(i, 'r') as f: S = read_sph(f)
except IOError: err("not a file '%s'" % i)
except ValueError: err("error reading '%s'" % i)

C = {}
null()
for p, t, x, y, z in S: proj(p, t, x, y, z)
n = len(S)    
#norm(n)
dump()
