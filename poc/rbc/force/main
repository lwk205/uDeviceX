#!/usr/bin/awk -f
function ini() { prog = "main" }

function read(file,   l, r, i) { # sets NV, NT, [X, Y, Z], [T0, T1, T2]
    r = getline < file
    if (bad(r)) err(r, "fail to read file: " f)
    if (!eq($0, "OFF")) err("not an OFF file")
    r = getline < file
    if (bad(r)) err(r, "fail to read file: " f)
    NV = $1; NT = $2
    for (i = 0; i < NV; i++) {
	r = getline < file
	if (bad(r)) err(r, "fail to read verts: " f)
	X[i] = $1; Y[i] = $2; Z[i] = $3
    }
    for (i = 0; i < NT; i++) {
	r = getline < file
	if (bad(r)) err(r, "fail to read tris: " f)
	T0[i] = $2; T1[i] = $3; T2[i] = $4
    }
    close(file)
}

function reg_e(i, j) {
    if ((i, j) in edg) return
    edg[i, j]; edg[j, i]
    E0[NE] = i; E1[NE] = j; NE++
}
function build_e01(   m, i, j, k) { # sets NE, E0, E1
    for (NE = m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	reg_e(i, j); reg_e(j, k); reg_e(k, i)
    }
}

function reg_t(vert, tri,   deg, cond) {
    for (deg = 0; ; deg++) {
	cond = (vert, deg) in TRI
	if (!cond) break;
    }
    TRI[vert, deg] = tri
}
function build_tri(   i, j, k, m) { # TRI: TRI[v] = [tri0, tri1, tri...]
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	reg_t(i, m); reg_t(j, m); reg_t(k, m)
    }
}

function tri_deg(vert,  deg, cond) {
    for (deg = 0; ; deg++) {
	cond = (vert, deg) in TRI
	if (!cond) break;
    }
    return deg
}

function write_deg(   i) {
    for (i = 0; i < NV; i++)
	print tri_deg(i)
}

BEGIN {
    ini()
    if (noarg()) err("needs FILE.off")
    file = first_arg()
    read(file)
    build_e01()
    build_tri()
    write_deg()
}

function msg(s) { printf "%s: %s\n", prog, s | "cat >&2" }
function err(s) { msg(s); exit(2) }
function shift(  i) { for (i = 2; i < ARGC; i++) ARGV[i-1] = ARGV[i]; ARGC-- }
function first_arg(   x) { x = ARGV[1]; shift(); return x }
function noarg() { return ARGC <= 1 }
function eq(a, b) { return a "" == b "" }
function ok(r)    { return r > 0 } # file read status
function bad(r)   { return !ok(r)}
