(X: 1, Y: 2, Z: 3) $
cross(a, b):=express(a ~ b) $
dot(a, b):=express(a . b) $

na(a, b):=concat(a, '_, b);
g([L]):=block([E, V, T], local(E, V),
  E: [], V: [], T: [],
  for l in L do apply('g0, l),
  [E, V, T]);
g0(name, expr, vars):= block(
  [de_v, de_n, dn_v],
  for v in vars do
    push(na(name, v) = diff(expr, v), E),
    if name # 'E then (
      push(name = expr, V),
    for v in vars do (
      push(v, T),
      de_v: na('E, v), de_n: na('E, name), dn_v: na(name, v),
      push(de_v, T), push(de_n, T), push(dn_v, T),
      push(de_v = de_n * dn_v, E))));
fmt([L]):=block([E, V, T, e, v], local(E, V, T),
  [E, V, T]: apply('g, L),
  fmt0(E, V, T));
cgrind_plus(seen, e):=block([k],
  k: lhs(e),
  if elementp(k, seen) then (
     infix("+=", 80, 80),
     cgrind(subst("+=", "=", e)))
   else cgrind(e),
   adjoin(k, seen));
fmt0(E, V, T):= block([seen],
  seen: set(),
  grind(sort(unique(T))),
  for v in          V do  cgrind(v),
  for e in reverse(E) do  seen: cgrind_plus(seen, e));

vabs(a):=sqrt(dot(a, a));
sl(e):=sort(listofvars(e));

rm0(E, V, T, key):=block(
  [val, cnt],
  local(E, V, T),
  cnt: 0,
  for e in E do if lhs(e)=key then (val: rhs(e), cnt: cnt + 1),
  for e in V do if lhs(e)=key then (val: rhs(e), cnt: cnt + 1),
  if cnt = 0 then error(key, "is not found"),
  if cnt > 1 then error(key, "is seen > 1 times"),
  E: sublist(E, lambda([e], lhs(e)#key)),
  V: sublist(V, lambda([e], lhs(e)#key)),
  T: sublist(T, lambda([e],      e#key)),
  E: maplist(lambda([e], subst(key = val, e)), E),
  V: maplist(lambda([e], subst(key = val, e)), V),
  [E, V, T]) $

rm(E, V, T, [L]):=(
  for key in L do [E, V, T]: rm0(E, V, T, key),
  [E, V, T]);
