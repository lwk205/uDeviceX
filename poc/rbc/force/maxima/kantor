load("vect") $
load("pdiff") $
load("cgrind") $

(X: 1, Y: 2, Z: 3) $
cross(a, b):=express(a ~ b) $
dot(a, b):=express(a . b) $

na(a, b):=concat(a, '_, b);
g([L]):=block([E, V], local(E, V),
  E: [], V: [],
  for l in L do apply('g0, l),
  [E, V]);
g0(name, expr, vars):= (
  for v in vars do
    push(na(name, v) = diff(expr, v), E),
    if name # 'E then (
      push(name = expr, V),
    for v in vars do
      push(na('E, v) = na('E, name) * na(name, v), E)));
fmt([L]):=block([E, V, e, v], local(E, V),
  [E, V]: apply('g, L),
  for v in          V do grind(v),
  for e in reverse(E) do grind(e));

a: [ax, ay, az] ;
b: [bx, by, bz] ;
c: [cx, cy, cz] ;
d: [dx, dy, dz] ;

ab: b - a;
ac: c - a;
bd: d - b;
bc: c - b;

kx: cross(ab, ac)[X];
ky: cross(ab, ac)[Y];
kz: cross(ab, ac)[Z];

nx: cross(bd, bc)[X];
ny: cross(bd, bc)[Y];
nz: cross(bd, bc)[Z];

kn: dot(['kx, 'ky, 'kz], ['nx, 'ny, 'nz]);
kk: dot(['kx, 'ky, 'kz], ['kx, 'ky, 'kz]);
nn: dot(['nx, 'ny, 'nz], ['nx, 'ny, 'nz]);

rsq: 1/sqrt('kk * 'nn);
cp : 'kn*'rsq;

g(['nn, x, ['y]]);

with_stdout("kantor.c",
fmt(
  ['E ,  cp,  ['kn, 'rsq]],
  ['rsq, rsq, ['kk, 'nn] ],
  ['kn, kn, ['nx, 'ny, 'nz, 'kx, 'ky, 'kz]],
  ['nn, nn, ['nx, 'ny, 'nz]],
  ['kk, kk, ['kx, 'ky, 'kz]],
  ['nx, nx, sort(listofvars(nx))],
  ['ny, ny, sort(listofvars(ny))],
  ['nz, nz, sort(listofvars(nz))],
  ['kx, kx, sort(listofvars(kx))],
  ['ky, ky, sort(listofvars(ky))],
  ['kz, kz, sort(listofvars(kz))]));

