function reg_e01(i, j) {
    if ((i, j) in edg) return
    edg[i, j]; edg[j, i]
    E0[NE] = i; E1[NE] = j; NE++
}
function build_e01(   m, i, j, k) { # sets NE, E0, E1
    for (NE = m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	reg_e01(i, j); reg_e01(j, k); reg_e01(k, i)
    }
}
function dih_nxt(i, j, k,   m) {
    NXT[i, j] = k
}
function build_dih(   m, i, j, k) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	NXT[i,j]=k; NXT[j,k]=i; NXT[k,i]=j
    }
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	D0[m] = NXT[i,j]
	D1[m] = i
	D2[m] = j
	D3[m] = NXT[j,i]
    }
}
function reg_t(vert, tri,   deg, cond) {
    for (deg = 0; ; deg++) {
	cond = (vert, deg) in TRI
	if (!cond) break;
    }
    TRI[vert, deg] = tri
}
function build_tri(   i, j, k, m) { # TRI: TRI[v] = [tri0, tri1, tri2, ...]
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	reg_t(i, m); reg_t(j, m); reg_t(k, m)
    }
}
function reg_e(vert, edg,   deg, cond) {
    for (deg = 0 ; ; deg++) {
	cond = (vert, deg) in EDG
	if (!cond) break
    }
    EDG[vert, deg] = edg
}
function build_edg(   i, j, m) { # EDG: EDG[v] = [edg0, edg1, edg2, ...]
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m];
	reg_e(i, m); reg_e(j, m)
    }
}

function setup() {
    build_e01()
    build_dih()

    build_tri()
    build_edg()
}

function to_cm(   m, x, y, z) {
    for (m = 0; m < NV; m++) {
	x += XX[m]; y += YY[m]; z += ZZ[m]
    }
    x /= NV; y /= NV; z /= NV
    for (m = 0; m < NV; m++) {
	XX[m] -= x; YY[m] -= y; ZZ[m] -= z
    }
}

function to_r1(   m, x, y, z, r) {
    for (m = 0; m < NV; m++) {
	x = XX[m]; y = YY[m]; z = ZZ[m]
	r = sqrt(x^2 + y^2 + z^2)
	XX[m] = x/r; YY[m] = y/r; ZZ[m] = z/r;
    }
}

function scale(x, y, z) {
    for (m = 0; m < NV; m++) {
	XX[m] *= x; YY[m] *= y; ZZ[m] *= z;
    }
}

function to_rbc(   m, x, y, z, rm, r, D) {
    for (m = 0; m < NV; m++) {
	x = XX[m]; y = YY[m]
	r = sqrt(x^2 + y^2)
	if (r > rm) rm = r
    }
    D = 2 * rm

    for (m = 0; m < NV;m ++) {
	x = XX[m]; y = YY[m]; z = ZZ[m]
	r = sqrt(x^2 + y^2)
	ZZ[m] = copy_sign(rbc(D, r), z)
    }
}

function sqrt0(r) { return r < 0 ? 0 : sqrt(r) }
function rbc(D,  r, c, a0, a1, a2, C5, C3, C1) {
    a0 = 0.0518; a1 = 2.0026; a2 = -4.491
    C5 = a2/16; C3 = -(a2+2*a1)/8; C1 = (a2+4*a1+16*a0)/16
    r /= D; r *= 2
    c = sqrt0(1 - r^2)
    return D * (C5*c^5+  C3*c^3+C1*c)
}
