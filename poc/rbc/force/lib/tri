function orient2d(a, b, P, Q, c,   acp, acq, bcp, bcq) {
    acp = a[P] - c[P]; bcp = b[P] - c[P]
    acq = a[Q] - c[Q]; bcq = b[Q] - c[Q]
    return acp * bcq - acq * bcp;
}

function orient2d_xy(a, b, c) {
    X = 0; Y = 1; Z = 2
    return orient2d(a, b, X, Y, c)
}

function orient2d_zx(a, b, c) {
    X = 0; Y = 1; Z = 2
    return orient2d(a, b, Z, X, c)
}

function orient2d_yz(a, b, c) {
    X = 0; Y = 1; Z = 2
    return orient2d(a, b, Y, Z, c)
}

function ac_bc_cross(a, c, b, r) {
    X = 0; Y = 1; Z = 2
    r[X] = orient2d_yz(a, b, c)
    r[Y] = orient2d_zx(a, b, c)
    r[Z] = orient2d_xy(a, b, c)
}

function orient3d(a, b, c, d,   ax, bx, cx) {
    X = 0; Y = 1; Z = 2
    ax = a[X] - d[X]; ay = a[Y] - d[Y]; az = a[Z] - d[Z]
    bx = b[X] - d[X]; by = b[Y] - d[Y]; bz = b[Z] - d[Z]
    cx = c[X] - d[X]; cy = c[Y] - d[Y]; cz = c[Z] - d[Z]
    return \
	ax*(by*cz - bz*cy) + \
	bx*(cy*az - cz*ay) + \
	cx*(ay*bz - az*by)
}

function dihedral_xy(ax, ay, az,
		     bx, by, bz,
		     cx, cy, cz,
		     dx, dy, dz,
#
		     a, b, c, d, k, l, bcx, bcy, bcz, bc) {
    X = 0; Y = 1; Z = 2

    a[X] = ax; a[Y] = ay; a[Z] = az
    b[X] = bx; b[Y] = by; b[Z] = bz
    c[X] = cx; c[Y] = cy; c[Z] = cz
    d[X] = dx; d[Y] = dy; d[Z] = dz

    ac_bc_cross(b, c, a,    k)
    ac_bc_cross(c, b, d,    l)

    bcx = b[X] - c[X]
    bcy = b[Y] - c[Y]
    bcz = b[Z] - c[Z]
    bc = sqrt(bcx*bcx + bcy*bcy + bcz*bcz)

    DIHEDRAL_Y = orient3d(a, b, c, d)*bc
    DIHEDRAL_X = k[X]*l[X] + k[Y]*l[Y] + k[Z]*l[Z]
}

function area(ax, ay, az,
	      bx, by, bz,
	      cx, cy, cz,
#
	      a, b, c, x, y, z) {
    X = 0; Y = 1; Z = 2
    a[X] = ax; a[Y] = ay; a[Z] = az
    b[X] = bx; b[Y] = by; b[Z] = bz
    c[X] = cx; c[Y] = cy; c[Z] = cz

    x = orient2d_yz(a, b, c)
    y = orient2d_zx(a, b, c)
    z = orient2d_xy(a, b, c)
    return sqrt(x*x + y*y + z*z)/2
}

function d_area(ax, ay, az,
		bx, by, bz,
		cx, cy, cz,
#
		kx, ky, kz) {
    kz = (bx-ax)*(cy-ay)-(by-ay)*(cx-ax)
    ky = (bz-az)*(cx-ax)-(bx-ax)*(cz-az)
    kx = (by-ay)*(cz-az)-(bz-az)*(cy-ay)

    DAX = (by-cy)*kz; DAX += (cz-bz)*ky
    DAY = (bz-cz)*kx; DAY += (cx-bx)*kz
    DAZ = (bx-cx)*ky; DAZ += (cy-by)*kx
    
    DBX = (az-cz)*ky; DBX += (cy-ay)*kz
    DBY = (ax-cx)*kz; DBY += (cz-az)*kx
    DBZ = (ay-cy)*kx; DBZ += (cx-ax)*ky
    
    DCX = (ay-by)*kz; DCX += (bz-az)*ky
    DCY = (az-bz)*kx; DCY += (bx-ax)*kz
    DCZ = (ax-bx)*ky; DCZ += (by-ay)*kx
}
