function ini() { prog = "main" }
function usg() {
    printf "%s FILE.off\n", prog | "cat >&2"
    printf "compute dihedral forces\n" | "cat >&2"
    exit
}

function scatter_force(   m, i, j, k, l, cnt, c) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	FX[i] += FAX[m]; FY[i] += FAY[m]; FZ[i] += FAZ[m]
	FX[j] += FBX[m]; FY[j] += FBY[m]; FZ[j] += FBZ[m]
	FX[k] += FCX[m]; FY[k] += FCY[m]; FZ[k] += FCZ[m]
	FX[l] += FDX[m]; FY[l] += FDY[m]; FZ[l] += FDZ[m]
	cnt[i]++; cnt[j]++; cnt[k]++; cnt[l]++
    }
}

function scatter_ang(   m, i, j, ang, cnt) {
    clear(ANG_VER)
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	ang = ANG_EDG[m]
	ANG_VER[i] += ang; cnt[i]++
	ANG_VER[j] += ang; cnt[j]++
    }
    for (m = 0; m < NV; m++) ANG_VER[m] /= cnt[m]
}

function vabs_f(   m) {
    for (m = 0; m < NV; m++)
	F[m] = sqrt(FX[m]^2 + FY[m]^2 + FZ[m]^2)
}

function compute_force(   m, i, j, k, l, de) {
    for (m = 0; m < NE; m++) {
	de = 1 # ANG_EDG[m]
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	d_cos(XX[i], YY[i], ZZ[i],
	      XX[j], YY[j], ZZ[j],
	      XX[k], YY[k], ZZ[k],
	      XX[l], YY[l], ZZ[l])
	FAX[m] = de*DAX; FAY[m] = de*DAY; FAZ[m] = de*DAZ
	FBX[m] = de*DBX; FBY[m] = de*DBY; FBZ[m] = de*DBZ
	FCX[m] = de*DCX; FCY[m] = de*DCY; FCZ[m] = de*DCZ
	FDX[m] = de*DDX; FDY[m] = de*DDY; FDZ[m] = de*DDZ
    }
}

function compute_ang(   m, i, j, k, l) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	dihedral_xy(XX[i], YY[i], ZZ[i],
		    XX[j], YY[j], ZZ[j],
		    XX[k], YY[k], ZZ[k],
		    XX[l], YY[l], ZZ[l])
	ANG_EDG[m] = atan2(DIHEDRAL_Y, DIHEDRAL_X)
    }
}

function vabs(a, b, c) { return sqrt(a^2 + b^2 + c^2) }

function write_vert(   m, r) {
    for (m = 0; m < NV; m++) {
	r = sqrt(XX[m]^2 + YY[m]^2)
	print r, ANG_VER[m], FX[m], FY[m], FZ[m], F[m]
    }
}

function write_dih(   m, r) {
    for (m = 0; m < NE; m++) {
	print ANG_EDG[m], vabs(FAX[m], FAY[m], FAZ[m])
    }
}

BEGIN {
    ini()
    if (noarg()) err("needs FILE.off")
    file = first_arg()
    if (eq(file, "-h")) usg()
    off_read(file)
    to_cm()
    to_rbc()
    # to_r1()
    setup()

    compute_ang()
    compute_force()

    scatter_force()
    scatter_ang()
    vabs_f()

    write_vert()
    # write_dih()
}
