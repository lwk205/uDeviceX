function ini() { prog = "main" }
function usg() {
    printf "%s FILE.off\n", prog | "cat >&2"
    printf "compute membrain bending forces\n" | "cat >&2"
    exit
}

function d_compute_ang(   m, i, j, k, l, de) {
    for (m = 0; m < NE; m++) {
	de = dE_ang[i]
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	d_dihedral(XX[i], YY[i], ZZ[i],
		   XX[j], YY[j], ZZ[j],
		   XX[k], YY[k], ZZ[k],
		   XX[l], YY[l], ZZ[l])
	FX[i] += de*DAX; FY[i] += de*DAY; FZ[i] += de*DAZ
	FX[j] += de*DBX; FY[j] += de*DBY; FZ[j] += de*DBZ
	FX[k] += de*DCX; FY[k] += de*DCY; FZ[k] += de*DCZ
	FX[l] += de*DDX; FY[l] += de*DDY; FZ[l] += de*DDZ
    }
}

function compute_ang(   m, i, j, k, l) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	dihedral_xy(XX[i], YY[i], ZZ[i],
		    XX[j], YY[j], ZZ[j],
		    XX[k], YY[k], ZZ[k],
		    XX[l], YY[l], ZZ[l])
	ANG_EDG[m] = atan2(DIHEDRAL_Y, DIHEDRAL_X)
    }
}

function d_compute_edg_len(   m, i, j, de) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	de = dE_len[m]
	d_dist(XX[i], YY[i], ZZ[i], XX[j], YY[j], ZZ[j])
	FX[i] += de*DAX; FY[i] += de*DAY; FZ[i] += de*DAZ
	FX[j] += de*DBX; FY[j] += de*DBY; FZ[j] += de*DBZ
    }
}

function compute_edg_len(   m, i, j) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	LEN[m] = dist(XX[i], YY[i], ZZ[i],
		      XX[j], YY[j], ZZ[j])
    }
}

function compute_area(   m, i, j, k) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	AREA_TRI[m] = area(XX[i], YY[i], ZZ[i],
			   XX[j], YY[j], ZZ[j],
			   XX[k], YY[k], ZZ[k])
    }
}

function d_compute_area(   m, i, j, k, de) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	de = dE_area_tri[m]
	d_area(XX[i], YY[i], ZZ[i],
	       XX[j], YY[j], ZZ[j],
	       XX[k], YY[k], ZZ[k])
	FX[i] += de*DAX; FY[i] += de*DAY; FZ[i] += de*DAZ
	FX[j] += de*DBX; FY[j] += de*DBY; FZ[j] += de*DBZ
	FX[k] += de*DCX; FY[k] += de*DCY; FZ[k] += de*DCZ
    }
}

function scatter_area(    m, i, j, k, A) {
    clear(AREA_VER)
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]; A = AREA_TRI[m]
	AREA_VER[i] += A/3
	AREA_VER[j] += A/3
	AREA_VER[k] += A/3
    }
}

function scatter_curv(   m, i, j, curv, len, ang) {
    clear(CURV)
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	len = LEN[m]
	ang = ANG_EDG[m]
	curv = len*ang/4
	CURV[i] += curv/2
	CURV[j] += curv/2
    }
}

function d_scatter_curv(   m, i, j, curv, len, ang) {
    clear(dE_ang); clear(dE_len)
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	len = LEN[m]
	ang = ANG_EDG[m]
	curv = len*ang/4
	dE_ang[m] += dE_curv[i]/2 * len/4
	dE_ang[m] += dE_curv[j]/2 * len/4
	dE_len[m] += dE_curv[i]/2 * ang/4
	dE_len[m] += dE_curv[j]/2 * ang/4
    }
}

function compute_julicher(    m, curv, A) {
    clear(E)
    for (m = 0; m < NV; m++) {
	curv = CURV[m]
	A    = AREA_VER[m]
	E[m] = 2*curv^2/A
    }
}

function d_compute_julicher(   m, curv, A) {
    clear(dE_area_vert); clear(dE_curv)
    for (m = 0; m < NV; m++) {
	curv = CURV[m]
	A = AREA_VER[m]
	dE_area_vert[m] = -2*curv^2/A^2
	dE_curv[m]      =  4*curv/A
    }
}

function d_scatter_area(    m, i, j, k, A) {
    clear(dE_area_tri)
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]; A = AREA_TRI[m]
	dE_area_tri[m] += dE_area_vert[i]/3
	dE_area_tri[m] += dE_area_vert[j]/3
	dE_area_tri[m] += dE_area_vert[k]/3
    }
}

function write_vert(   m, r) {
    for (m = 0; m < NV; m++) {
	r = sqrt(XX[m]^2 + YY[m]^2)
	print r, FX[m], FY[m], FZ[m], F[m], AREA_VER[m], CURV[m]
    }
}

function write_edg(   m, i, j, x, y, r) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	x = (XX[i] + XX[j])/2
	y = (YY[i] + YY[j])/2
	r = sqrt(x^2 + y^2)
	print r, dE_len[m], dE_ang[m], ANG_EDG[m]
    }
}

function write_tri(   m, i, j, k, x, y, r) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T1[m]
	x = (XX[i] + XX[j] + XX[k])/3
	y = (YY[i] + YY[j] + YY[k])/3
	r = sqrt(x^2 + y^2)
	print r, FX_TRI[m], FY_TRI[m], FZ_TRI[m]
    }
}

function vabs_f(   m) {
    for (m = 0; m < NV; m++)
	F[m] = sqrt(FX[m]^2 + FY[m]^2 + FZ[m]^2)
}

function scatter_force(   m, i, j, k, fx, fy, fz) {
    clear(FX_TRI); clear(FY_TRI); clear(FZ_TRI)
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	fx = FX[m]; fy = FY[m]; fz = FZ[m]
	FX_TRI[i] += fx/3; FX_TRI[j] += fx/3; FX_TRI[k] += fx/3
	FY_TRI[i] += fy/3; FY_TRI[j] += fy/3; FY_TRI[k] += fy/3
	FZ_TRI[i] += fz/3; FZ_TRI[j] += fz/3; FZ_TRI[k] += fz/3
    }
}

BEGIN {
    ini()
    if (noarg()) err("needs FILE.off")
    file = first_arg()
    if (eq(file, "-h")) usg()
    off_read(file)
    to_cm()
    setup()

    compute_ang()
    compute_edg_len()
    compute_area()
    scatter_area()
    scatter_curv()

    compute_julicher()
    clear(FX) clear(FY); clear(FZ)

    d_compute_julicher()
    d_scatter_curv()
    d_scatter_area()
    d_compute_area()
    d_compute_edg_len()
    d_compute_ang()

    vabs_f()
    scatter_force()

    vtk_push("fx", FX, vert)
    vtk_push("fy", FY, vert)
    vtk_push("fz", FZ, vert)
    vtk_push("f",  F, vert)
    vtk_write("o.vtk", vert, tri)

    # write_vert()
    # write_edg()
    write_tri()
}
