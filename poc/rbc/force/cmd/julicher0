function ini() { prog = "main" }
function usg() {
    printf "%s FILE.off\n", prog | "cat >&2"
    printf "compute membrain bending forces\n" | "cat >&2"
    exit
}

function compute_ang(   m, i, j, k, l) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	dihedral_xy(XX[i], YY[i], ZZ[i],
		    XX[j], YY[j], ZZ[j],
		    XX[k], YY[k], ZZ[k],
		    XX[l], YY[l], ZZ[l])
	ANG_EDG[m] = atan2(DIHEDRAL_Y, DIHEDRAL_X)
    }
}

function compute_edg_len(   m, i, j) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	LEN[m] = dist(XX[i], YY[i], ZZ[i],
		      XX[j], YY[j], ZZ[j])
    }
}

function compute_area(   m, i, j, k) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	AREA_TRI[m] = area(XX[i], YY[i], ZZ[i],
			   XX[j], YY[j], ZZ[j],
			   XX[k], YY[k], ZZ[k])
    }
}

function scatter_area(    m, i, j, k, A) {
    clear(AREA_VER)
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]; A = AREA_TRI[m]
	AREA_VER[i] += A/3
	AREA_VER[j] += A/3
	AREA_VER[k] += A/3
    }
}

function scatter_curv(   m, i, j, curv, len, ang) {
    clear(CURV)
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	len = LEN[m]
	ang = ANG_EDG[m]
	curv = len*ang/4
	CURV[i] += curv/2
	CURV[j] += curv/2
    }
}

function compute_julicher(    m, curv, A) {
    clear(E)
    for (m = 0; m < NV; m++) {
	curv = CURV[m]
	A    = AREA_VER[m]
	E[m] = 2*curv^2/A
    }
}

function d_compute_julicher(   m, curv, A) {
    clear(dE_A); clear(dE_curv)
    for (m = 0; m < NV; m++) {
	curv = CURV[m]
	A = AREA_VER[m]
	dE_A[m]    = -2*curv^2/A^2
	dE_curv[m] =  4*curv/A
    }
}

function write(   m, r) {
    for (m = 0; m < NV; m++) {
	r = sqrt(XX[m]^2 + YY[m]^2)
	print r, E[m], dE_A[m], dE_curv[m]
    }
}

BEGIN {
    ini()
    if (noarg()) err("needs FILE.off")
    file = first_arg()
    if (eq(file, "-h")) usg()
    off_read(file)
    # refine2()    
    setup()

    compute_ang()
    compute_edg_len()
    compute_area()
    scatter_area()
    scatter_curv()
    
    compute_julicher()
    d_compute_julicher()

    vtk_push("area", AREA_TRI, tri)
    vtk_push("julicher", E, vert)
    vtk_write("o.vtk", vert, tri)
    
    write()
}
