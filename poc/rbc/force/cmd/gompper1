function ini() { prog = "main" }
function usg() {
    printf "%s FILE.off\n", prog | "cat >&2"
    printf "compute membrain bending forces\n" | "cat >&2"
    exit
}

function compute_phi(    z, r, m) {
    for (m = 0; m < NV; m++) {
	r = sqrt(XX[m]^2 + YY[m]^2 + ZZ[m]^2)
	z = abs(ZZ[m])
	PHI[m] = acos(z/r)
    }
}

function compute_area(   m, i, j, k) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	AREA_TRI[m] = area(XX[i], YY[i], ZZ[i],
			   XX[j], YY[j], ZZ[j],
			   XX[k], YY[k], ZZ[k])
    }
}

function scatter_area(    m, i, j, k, A) {
    clear(AREA_VER)
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]; A = AREA_TRI[m]
	AREA_VER[i] += A/3
	AREA_VER[j] += A/3
	AREA_VER[k] += A/3
    }
}

function compute_edg_len(   m, i, j) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	LEN[m] = dist(XX[i], YY[i], ZZ[i],
		      XX[j], YY[j], ZZ[j])
    }
}
function d_compute_edg_len(   m, i, j, dx, dy, dz, len, de, d) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	de = dE_len[m]
	len = LEN[m]

	dx = XX[i] - XX[j]
	dy = YY[i] - YY[j]
	dz = ZZ[i] - ZZ[j]

	d = dx/len*de; FX[i] += d; FX[j] -= d
	d = dy/len*de; FY[i] += d; FY[j] -= d
	d = dz/len*de; FZ[i] += d; FZ[j] -= d
    }
}

function cot(i, j, k) {
    ang_xy(XX[i], YY[i], ZZ[i],
	   XX[j], YY[j], ZZ[j],
	   XX[k], YY[k], ZZ[k])
    return ANG_X/ANG_Y
}
function d_cotangent(i, j, k) {
    d_cot(XX[i], YY[i], ZZ[i],
	  XX[j], YY[j], ZZ[j],
	  XX[k], YY[k], ZZ[k])
}
function compute_cotangent(   m, i, j, k, l, ca, cb) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	ca = cot(j, k, i)
	cb = cot(k, j, l)
	COT0[m] = ca; COT1[m] = cb; T[m] = ca + cb
    }
}

function d_compute_cotangent(   m, i, j, k, l, de) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	de = dE_T[m]
	d_cotangent(j, k, i)
	FX[j] += DAX*de; FY[j] += DAY*de; FZ[j] += DAZ*de
	FX[k] += DBX*de; FY[k] += DBY*de; FZ[k] += DBZ*de
	FX[i] += DCX*de; FY[i] += DCY*de; FZ[i] += DCZ*de

	d_cotangent(k, j, l)
	FX[k] += DAX*de; FY[k] += DAY*de; FZ[k] += DAZ*de
	FX[j] += DBX*de; FY[j] += DBY*de; FZ[j] += DBZ*de
	FX[l] += DCX*de; FY[l] += DCY*de; FZ[l] += DCZ*de
    }
}

function compute_l2t(   m, j, k, e) {
    clear(L2T)
    for (m = 0; m < NE; m++) {
	j = D1[m]; k = D2[m]
	e = LEN[m]^2 * T[m]
	L2T[j] += e; L2T[k] += e
    }
}

function d_compute_l2t(   m, j, k, e) {
    for (m = 0; m < NE; m++) {
	j = D1[m]; k = D2[m]
	e = LEN[m]^2*T[m]
	L2T[j] += e; L2T[k] += e

	dE_len[m] += 2*LEN[m]*T[m]*(dE_l2t[j] + dE_l2t[k])
	dE_T[m]   += LEN[m]^2 * (dE_l2t[j] + dE_l2t[k])
    }
}

function compute_xt(   m, i, j, k, l, dx, dy, dz) {
    clear(XT); clear(YT); clear(ZT)
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	dx = XX[j] - XX[k]
	dy = YY[j] - YY[k]
	dz = ZZ[j] - ZZ[k]
	dx *= T[m]; dy *= T[m]; dz *= T[m]
	XT[j] += dx; YT[j] += dy; ZT[j] += dz
	XT[k] -= dx; YT[k] -= dy; ZT[k] -= dz
    }
}

function d_compute_xt(   m, i, j, k, l, dx, dy, dz, de) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	dx = XX[j] - XX[k]
	dy = YY[j] - YY[k]
	dz = ZZ[j] - ZZ[k]

	dE_T[m] += dx*(dE_xt[j] - dE_xt[k])
	de  = T[m]*(dE_xt[j] - dE_xt[k])
	FX[j] += de; FX[k] -= de

	dE_T[m] += dy*(dE_yt[j] - dE_yt[k])
	de  = T[m]*(dE_yt[j] - dE_yt[k])
	FY[j] += de; FY[k] -= de

	dE_T[m] += dz*(dE_zt[j] - dE_zt[k])
	de  = T[m]*(dE_zt[j] - dE_zt[k])
	FZ[j] += de; FZ[k] -= de
    }
}

function d_compute_e(   m, num, den) {
    for (m = 0; m < NV; m++) {
	num = XT[m]^2 + YT[m]^2 + ZT[m]^2
	den = L2T[m]
	# GOMPPER[m] = 2 * num / den
	dE_l2t[m] = - 2 * num   / den^2
	dE_xt[m]  =   4 * XT[m] / den
	dE_yt[m]  =   4 * YT[m] / den
	dE_zt[m]  =   4 * ZT[m] / den
    }
}

function compute_e(   m, num, den, A) {
    for (m = 0; m < NV; m++) {
	num = XT[m]^2 + YT[m]^2 + ZT[m]^2
	den = L2T[m]
	A   = AREA_VER[m]
	GOMPPER[m] = 2 * num / (den * A)
    }
}

function write_vert(   m, r) {
    for (m = 0; m < NV; m++) {
	r = sqrt(XX[m]^2 + YY[m]^2)
	print r, PHI[m], GOMPPER[m], FX[m], FY[m], FZ[m], AREA_VER[m]
    }
}

BEGIN {
    ini()
    if (noarg()) err("needs FILE.off")
    file = first_arg()
    if (eq(file, "-h")) usg()
    off_read(file)
    to_cm()
    to_rbc()
    # to_r1()
    setup()

    compute_edg_len()
    compute_cotangent()
    compute_l2t()
    compute_xt()
    compute_e()

    clear(FX); clear(FY); clear(FZ)
    d_compute_e()
    d_compute_xt()
    d_compute_l2t()
    d_compute_cotangent()
    d_compute_edg_len()

    compute_phi()
    compute_area()
    scatter_area()

    write_vert()
}
