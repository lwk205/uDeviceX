function ini() { prog = "main" }
function usg() {
    printf "%s FILE.off\n", prog | "cat >&2"
    printf "compute membrain bending forces\n" | "cat >&2"
    exit
}

function compute_ang(   m, i, j, k, l) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	dihedral_xy(XX[i], YY[i], ZZ[i],
		    XX[j], YY[j], ZZ[j],
		    XX[k], YY[k], ZZ[k],
		    XX[l], YY[l], ZZ[l])
	ANG_EDG[m] = atan2(DIHEDRAL_Y, DIHEDRAL_X)
    }
}

function compute_edg_len(   m, i, j) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	LEN[m] = dist(XX[i], YY[i], ZZ[i],
		      XX[j], YY[j], ZZ[j])
    }
}

function compute_area(   m, i, j, k) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	AREA_TRI[m] = area(XX[i], YY[i], ZZ[i],
			   XX[j], YY[j], ZZ[j],
			   XX[k], YY[k], ZZ[k])
    }
}

function compute_kantor(    m, i, j, ang, A, eng) {
    clear(KANTOR)
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	ang = ANG_EDG[m]
	eng = 2*(1 - cos(ang))
	KANTOR[i] += eng/2
	KANTOR[j] += eng/2
    }
}

function d_compute_kantor(   m, i, j, k, l, de) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	d_cos(XX[i], YY[i], ZZ[i],
	      XX[j], YY[j], ZZ[j],
	      XX[k], YY[k], ZZ[k],
	      XX[l], YY[l], ZZ[l])
	FX[i] += DAX; FY[i] += DAY; FZ[i] += DAZ
	FX[j] += DBX; FY[j] += DBY; FZ[j] += DBZ
	FX[k] += DCX; FY[k] += DCY; FZ[k] += DCZ
	FX[l] += DDX; FY[l] += DDY; FZ[l] += DDZ
    }
}

function vabs_f(   m) {
    for (m = 0; m < NV; m++)
	F[m] = sqrt(FX[m]^2 + FY[m]^2 + FZ[m]^2)
}

function write(   m, r) {
    for (m = 0; m < NV; m++) {
	r = sqrt(XX[m]^2 + YY[m]^2)
	print r, KANTOR[m], FX[m], FY[m], FZ[m], F[m]
    }
}

BEGIN {
    ini()
    if (noarg()) err("needs FILE.off")
    file = first_arg()
    if (eq(file, "-h")) usg()
    off_read(file)
    to_rbc()
    setup()

    compute_ang()
    compute_area()
    compute_kantor()
    
    clear(FX) clear(FY); clear(FZ)
    d_compute_kantor()
    vabs_f()

    vtk_push("kantor", KANTOR, vert)
    vtk_push("fx", FX, vert)
    vtk_push("fy", FY, vert)
    vtk_push("fz", FZ, vert)
    vtk_push("fz", F, vert)    
    vtk_write("o.vtk", vert, tri)

    off_write("o.off")
    write()
}
