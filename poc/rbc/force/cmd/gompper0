function ini() { prog = "main" }
function usg() {
    printf "%s FILE.off\n", prog | "cat >&2"
    printf "compute membrain bending forces\n" | "cat >&2"
    exit
}

function compute_area(   m, i, j, k) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]
	AREA_TRI[m] = area(XX[i], YY[i], ZZ[i],
			   XX[j], YY[j], ZZ[j],
			   XX[k], YY[k], ZZ[k])
    }
}

function scatter_area(    m, i, j, k, A) {
    clear(AREA_VER)
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T2[m]; A = AREA_TRI[m]
	AREA_VER[i] += A/3
	AREA_VER[j] += A/3
	AREA_VER[k] += A/3
    }
}

function cot(i, j, k) {
    ang_xy(XX[i], YY[i], ZZ[i],
	   XX[j], YY[j], ZZ[j],
	   XX[k], YY[k], ZZ[k])
    return ANG_X/ANG_Y
}
function compute_cotangent(   m, i, j, k, l) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	COT0[m] = cot(j, k, i)
	COT1[m] = cot(k, j, l)
    }
}

function write_vert(   m, r) {
    for (m = 0; m < NV; m++) {
	r = sqrt(XX[m]^2 + YY[m]^2)
	print r, AREA_VER[m]
    }
}

function write_edg(   m, i, j, x, y, r) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	x = (XX[i] + XX[j])/2
	y = (YY[i] + YY[j])/2
	r = sqrt(x^2 + y^2)
	print r, COT0[m], COT1[m]
    }
}

function write_tri(   m, i, j, k, x, y, r) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T1[m]
	x = (XX[i] + XX[j] + XX[k])/3
	y = (YY[i] + YY[j] + YY[k])/3
	r = sqrt(x^2 + y^2)
	print r, E_TRI[m], FX_TRI[m], FY_TRI[m], FZ_TRI[m], F_TRI[m]
    }
}

BEGIN {
    ini()
    if (noarg()) err("needs FILE.off")
    file = first_arg()
    if (eq(file, "-h")) usg()
    off_read(file)
    to_cm()
    to_rbc()
    # to_r1()
    setup()

    compute_area()
    scatter_area()    
    compute_cotangent()

    write_vert()
    # write_edg()
    # write_tri()
}
