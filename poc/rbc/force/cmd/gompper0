function ini() { prog = "main" }
function usg() {
    printf "%s FILE.off\n", prog | "cat >&2"
    printf "compute membrain bending forces\n" | "cat >&2"
    exit
}

function compute_edg_len(   m, i, j) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	LEN[m] = dist(XX[i], YY[i], ZZ[i],
		      XX[j], YY[j], ZZ[j])
    }
}

function cot(i, j, k) {
    ang_xy(XX[i], YY[i], ZZ[i],
	   XX[j], YY[j], ZZ[j],
	   XX[k], YY[k], ZZ[k])
    return ANG_X/ANG_Y
}
function compute_cotangent(   m, i, j, k, l, ca, cb) {
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	ca = cot(j, k, i)
	cb = cot(k, j, l)
	COT0[m] = ca; COT1[m] = cb; T[m] = ca + cb
    }
}

function compute_l2t(   m, i, j, k, l, e) {
    clear(L2T)
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	e = LEN[m]^2 * T[m]
	L2T[j] += e; L2T[k] += e
    }
}

function compute_xt(   m, i, j, k, l, dx, dy, dz, e) {
    clear(XT); clear(YT); clear(ZT)
    for (m = 0; m < NE; m++) {
	i = D0[m]; j = D1[m]; k = D2[m]; l = D3[m]
	dx = XX[j] - XX[k]
	dy = YY[j] - YY[k]
	dz = ZZ[j] - ZZ[k]
	dx *= T[m]; dy *= T[m]; dz *= T[m]
	XT[j] += dx; YT[j] += dy; ZT[j] += dz
	XT[k] -= dx; YT[k] -= dy; ZT[k] -= dz
    }
}

function compute_e(   m, num, den) {
    for (m = 0; m < NV; m++) {
	num = XT[m]^2 + YT[m]^2 + ZT[m]^2
	den = L2T[m]
	GOMPPER[m] = 2 * num / den
    }
}

function write_vert(   m, r) {
    for (m = 0; m < NV; m++) {
	r = sqrt(XX[m]^2 + YY[m]^2)
	print r, GOMPPER[m]
    }
}

function write_edg(   m, i, j, x, y, r) {
    for (m = 0; m < NE; m++) {
	i = E0[m]; j = E1[m]
	x = (XX[i] + XX[j])/2
	y = (YY[i] + YY[j])/2
	r = sqrt(x^2 + y^2)
	print r, COT0[m], COT1[m]
    }
}

function write_tri(   m, i, j, k, x, y, r) {
    for (m = 0; m < NT; m++) {
	i = T0[m]; j = T1[m]; k = T1[m]
	x = (XX[i] + XX[j] + XX[k])/3
	y = (YY[i] + YY[j] + YY[k])/3
	r = sqrt(x^2 + y^2)
	print r, E_TRI[m], FX_TRI[m], FY_TRI[m], FZ_TRI[m], F_TRI[m]
    }
}

BEGIN {
    ini()
    if (noarg()) err("needs FILE.off")
    file = first_arg()
    if (eq(file, "-h")) usg()
    off_read(file)
    to_cm()
    to_rbc()
    # to_r1()
    setup()

    compute_edg_len()
    compute_cotangent()
    compute_l2t()
    compute_xt()
    compute_e()

    write_vert()
    # write_edg()
    # write_tri()
}
