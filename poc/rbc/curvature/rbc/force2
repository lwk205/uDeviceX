load("vect")   $
load("pdiff")  $
load("scifac") $
ratprint: false $

(X: 1, Y: 2, Z: 3) $

matchdeclare(x, true)                  $
defrule(r_F0, F(x),             F0(x)) $
defrule(r_F1, pderivop(F,1)(x), F1(x)) $
defrule(r_F2, pderivop(F,2)(x), F2(x)) $
defrule(r_F3, pderivop(F,3)(x), F3(x)) $
defrule(r_F4, pderivop(F,4)(x), F4(x)) $
conv(e):=apply1(e, r_F0, r_F1, r_F2, r_F3, r_F4)   $
assume(sin(u) > 0) $

cross(a, b):=express(a ~ b);
dot(a, b):=express(a . b);

x: sin('u)*cos('v);
y: sin('u)*sin('v);
z: F(cos('u))         ;

r: [x, y, z];
ru: diff(r, 'u);
rv: diff(r, 'v);

guu: dot(ru, ru) $
guv: dot(ru, rv) $
gvv: dot(rv, rv) $
g  : determinant(matrix([guu, guv], [guv, gvv])) $

ruu: diff(r, 'u, 2) $
rvv: diff(r, 'v, 2) $
ruv: diff(diff(r, 'v), 'u)   $
n  : cross(ru, rv) / sqrt(g) $

c1: dot(ruu, n)/guu $
c1: fullratsimp(trigsimp(dot(ruu, n))) / guu $
c1: trigsimp(c1) $

c2: dot(rvv, n) / gvv $
c2: trigsimp(c2) $

H: (c1 + c2)/2 $
K: c2 * c2     $

ds(p):= block(
  [p1: diff(p, 'u), p2: diff(p, 'v), g11: guu, g22: gvv],
  1/sqrt(g) * (
    diff(p1 * sqrt(g22/g11), 'u) +
    diff(p2 * sqrt(g11/g22), 'v)))$

f: 2 * (2*H*(H^2 - K) + ds(H)) $

ds: ds(H) $
ds: subst(v = 0, ds) $
ds: trigsimp(ds)     $
ds: conv(ds)         $

with_stdout("f.awk",
   grind('ds = ds));