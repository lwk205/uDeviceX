#!/usr/bin/awk -f

# format size ("n")

NR == 1 {
    M = 80
    n = $0
    a = sprintf("const int %s[%s] = {", n, N = 27)
    tab = length(a)
    next
}

{
    s = format()
    if (!Agn) Agn = 1
    else a = a ", "
    if (length(a) > M) {
	print a
	a = tabs()
    }
    a = a s
}

function tabs(   s) {
    s = sprintf("%" tab "s", "")
    return s
}

END {
    printf "%s", a
    printf "};\n"
}

function format(s,   sz, fmt) {
    s = format0($1, $2, $3)
    sz = length(format0(0, 0, 0))
    fmt = "%" sz "s"
    return sprintf(fmt, s)
}

function format0(x, y, z,   e, a, n) {
    if ((e = ex(x)) != 1) a[++n] = e
    if ((e = ey(y)) != 1) a[++n] = e
    if ((e = ez(z)) != 1) a[++n] = e
    if      (n == 0) return fmt0()
    else if (n == 1) return fmt1(a)
    else if (n == 2) return fmt2(a)
    else if (n == 3) return fmt3(a)
}

function fmt0()  { return         "1" }
function fmt1(a) { return sprintf("(%s)",           a[1]) }
function fmt2(a) { return sprintf("(%s)*(%s)",      a[1], a[2]) }
function fmt3(a) { return sprintf("(%s)*(%s)*(%s)", a[1], a[2], a[3]) }

function ex(d) { return encode(d, "XS") } # encode
function ey(d) { return encode(d, "YS") }
function ez(d) { return encode(d, "ZS") }
function encode(d, s) { return (d == 0 ? s : 1) }

