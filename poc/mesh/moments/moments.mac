/*
compute moments of a tetrahedron OABC, O = [0,0,0]
*/

kill(all)$

load("cgrind")$

[X, Y, Z]: [1, 2, 3]$

/* make a vector */
mv(P)::=buildq([l: P,
  r: create_list(concat(P, d), d,  ['x, 'y, 'z])],
  l: r) $


/* vertices of the tetrahedron */
mv(O)$ mv(A)$ mv(B)$ mv(C)$

O:[0,0,0];

OA: A-O$
OB: B-O$
OC: C-O$

r : O + u*OA + v*OB + w*OC;

Jacobian: matrix(diff(r, u), diff(r, v), diff(r, w));
J: determinant(Jacobian);

/* integrate over tetrahedron */

I(e) := J * integrate(integrate(integrate(e(r), w, 0, 1-u-v), v, 0, 1-u), u, 0, 1);

/* Volume */
m000(r) := 1$

cgrind(optimize(I(m000)));

/* first moments */
m100(r) := r[X]^1$
m010(r) := r[Y]^1$
m001(r) := r[Z]^1$

cgrind(optimize([I(m100), I(m010), I(m001)]));

/* second moments */
m200(r) := r[X]^2$
m020(r) := r[Y]^2$
m002(r) := r[Z]^2$

m110(r) := r[X]*r[Y]$
m101(r) := r[X]*r[Z]$
m011(r) := r[Y]*r[Z]$

cgrind(optimize([I(m200), I(m020), I(m002), I(m110), I(m101), I(m011)]));
