. u.case.util

: ${DRYRUN=0}

set -eu

### -d: case directory ###
d= F=0
for c
do shift
   if   test "$c" = -d; then F=1
   elif test  $F -eq 1; then d="$c"; F=0
   else                      set -- "$@" "$c"
   fi
done
if test -z "$d"; then err 'u.case: -d is not set'; fi

e mkdir -p "$d"
if test ! -d "$d"; then err "u.case: fail to create directory '$d'"; fi

### -f: file ###
copy () {
    if test ! -r "$from"; then err "u.case: not a file '$from'"; fi
    if optp "$to";        then err "u.case: not a file name '$to'"; fi
    e cp -- "$from" "$d/$to"
}
from= to= F=0
for c
do shift
   if   test "$c" = -f; then F=1
   elif test  $F -eq 1; then from="$c"; F=2
   elif test  $F -eq 2; then   to="$c"; copy; F=0
   else                      set -- "$@" "$c"
   fi
done

exe () (
    cd "$d"
    e "$e"
    if test $? -ne 0; then e 'u.case: fail to run "$e"'; fi
)

### -b: before ###
e= F=0
for c
do shift
   if   test "$c" = -b; then F=1
   elif test  $F -eq 1; then e="$c"; exe; F=0
   else                      set -- "$@" "$c"
   fi
done

build () (
    cd "$d"
    e u.build "$@"
    if test $? -ne 0; then err 'u.build failed'; fi
)

main () {
    ### skip -a ###
    local e c F
    e= F=0
    for c
    do shift
       if   test "$c" = -a; then F=1
       elif test  $F -eq 1; then F=0
       else                      set -- "$@" "$c"
       fi
    done
    build "$@"
}
main "$@"

### -a: after ###
e= F=0
for c
do shift
   if   test "$c" = -a; then F=1
   elif test  $F -eq 1; then e="$c"; exe; F=0
   else                      set -- "$@" "$c"
   fi
done
