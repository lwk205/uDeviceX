#!/bin/sh

. u.case.util

: ${DRYRUN=0}

set -eu

### -d: case directory ###
d= F=0
for c
do shift
   if   test "$c" = -d; then F=1
   elif test  $F -eq 1; then d="$c"; F=0
   else                      set -- "$@" "$c"
   fi
done
if test -z "$d"; then err 'u.case: -d is not set'; fi

e mkdir -p "$d"
if test ! -d "$d"; then err "u.case: fail to create directory '$d'"; fi

bad_opt() {
    if test $F -eq 0; then return 1
    elif optp "$c"  ; then return 0
    else                   return 1
    fi
}

### -f: file ###
copy () {
    if test ! -r "$from"; then err "u.case: not a file '$from'"; fi
    e cp -- "$from" "$d/$to"
}
from= to= F=0
for c
do shift
   if   bad_opt;        then err "u.case: not a file name '$c'"
   elif test "$c" = -f; then                  F=1
   elif test  $F -eq 1; then from="$c";       F=2
   elif test  $F -eq 2; then   to="$c"; copy; F=0
   else                      set -- "$@" "$c"
   fi
done
if test "$F" -ne 0; then err 'u.case: wrong args for -f'; fi

### -l: link ###
copy () {
    if test ! -r "$from"; then err "u.case: not a file '$from'"; fi
    e ln -s -- "$from" "$d/$to"
}
from= to= F=0
for c
do shift
   if   bad_opt;        then err "u.case: not a file name '$c'"
   elif test "$c" = -l; then                  F=1
   elif test  $F -eq 1; then from="$c";       F=2
   elif test  $F -eq 2; then   to="$c"; link; F=0
   else                      set -- "$@" "$c"
   fi
done
if test "$F" -ne 0; then err 'u.case: wrong args for -l'; fi

exe () (
    cd "$d"
    e "$e"
    if test $? -ne 0; then e 'u.case: fail to run "$e"'; fi
)

### -b: before ###
e= F=0
for c
do shift
   if   test "$c" = -b; then F=1
   elif test  $F -eq 1; then e="$c"; exe; F=0
   else                      set -- "$@" "$c"
   fi
done

build () (
    local U C
    if test $# -eq 0; then err 'u.case: expecting unit'; fi
    U="$1"; shift
    if test $# -eq 0; then err 'u.case: expecting config file'; fi
    C="$1"; shift
    if test  "$DRYRUN" != 0; then return; fi
    S=`to_abs "$S"`
    C=`to_abs "$C"`
    cd "$d"
    e S="$S" u.build "$U" "$C"
    if test $? -ne 0; then err 'u.build failed'; fi
)

main () {
    ### skip -a ###
    local e c F
    e= F=0
    for c
    do shift
       if   test "$c" = -a; then F=1
       elif test  $F -eq 1; then F=0
       else                      set -- "$@" "$c"
       fi
    done
    build "$@"
}
main "$@"

### -a: after ###
e= F=0
for c
do shift
   if   test "$c" = -a; then F=1
   elif test  $F -eq 1; then e="$c"; exe; F=0
   else                      set -- "$@" "$c"
   fi
done
