#!/bin/sh

"${AWK-awk}" '
function kvsplit(s, kv,    n, t, i) { # key-value split of a string
    n = split(s, t)
    for (i = 1; i<=n; i+=2)
	kv[t[i]] = t[i+1]
    return n
}

# key and value
function getk(s) {sub(/^-/, "", s); sub(/=.*/, "", s); return s}
function getv(s) {sub(/^-/, "", s); sub(/.*=/, "", s); return s}

# c language id?
function cid(s)      { return s ~ /^[A-Za-z_][A-Za-z_0-9]*$/ }
function assert_k(k, cur) {
    if   (cid(k)) return
    err("u.argp: invalid parameter: " cur)
}

function err(s) {
    printf s "\n" | "cat >&2"
    exit(Exit = 1)
}

function boolp(k) { # not = means boolean
    return k !~ /=/
}

BEGIN {
    iarg = 1 #
    file = ARGV [iarg++]

    while (iarg < ARGC)  {
	cur = ARGV[iarg++]
	k = getk(cur);                  assert_k(k, cur)
	if (boolp(cur)) kv[k] = "true"
	else            kv[k] = getv(cur)
    }
    ARGC = 2 # to read the first argument as a file
}
function max(a, b) {return a > b ? a : b}
function write() {
    for (k in kv) { # collect maximum length for formatting
	v = kv[k]
	sk = max(length(k), sk)
	sv = max(length(v), sv)
    }

    # dump output
    printf "\n"
    u_tmpl = sprintf("#undef  %%%ss", sk)
    d_tmpl = sprintf("#define %%%ss %%%ss", sk, sv + 2) # with brackets

    for (k in kv) {
	line = sprintf(u_tmpl, k)
	print line | "sort"
    }
    close("sort")
    printf "\n"

    for (k in kv) {
	v = kv[k]; vd = kv_default[k]; vp = "(" v ")"
	line = sprintf(d_tmpl, k, vp)
	if (v != vd) line = line "    /* */" # marking non-default
					     # value
	print line | "sort"
    }
    close("sort")
}

{
    print
}

END {
    if (Exit) exit(Exit); else write()
}

' "$@"
