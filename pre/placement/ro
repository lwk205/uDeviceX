#!/bin/sh

. plcmt.util
prog=plcmt.ro

usg () {
    msg "$prog Lx Ly Lz r     f    sc ang     solid.out rbc.out"
    msg '   ro(`rbc and solid`) : create initial conditons for rbc and solid'
    msg '   L[xyz]: domain sizes'
    msg '   r: radius of a sphere for packing'
    msg '   f: fraction of solids'
    msg '   sc: scale for RBCs'
    msg '   ang: angle of rotation around OX in radians ("rnd" for random)'
    exit
}

if test $# -ne 0 && test "$1" = -h; then usg; fi

if test $# -le 2; then err "expecting domain size"; fi
x="$1"; shift; y="$1"; shift; z="$1"; shift

if ! intp "$x"; then err "not an integer '$x'"; fi
if ! intp "$y"; then err "not an integer '$y'"; fi
if ! intp "$z"; then err "not an integer '$z'"; fi

if test $# -le 0; then err "expecting packing radious"; fi
r="$1"; shift
if ! numberp "$r"; then err "not a number '$r'"; fi

if test $# -le 0; then err "expecting fraction"; fi
f="$1"; shift
if ! numberp "$f"; then err "not a number '$f'"; fi

if test $# -le 0; then err "expecting rbc scale"; fi
s="$1"; shift
if ! numberp "$s"; then err "not a number '$s'"; fi

if test $# -le 0; then err "expecting RBC angle"; fi
a="$1"; shift
if ! numberp "$a" && test "$a" != rnd; then err "wrong angle '$a'"; fi

if test $# -le 0; then err "expecting solid.out"; fi
O="$1"; shift

if test $# -le 0; then err "expecting rbc.out"; fi
R="$1"; shift

pr=/tmp/rbc.$$; >$pr
ps=/tmp/rig.$$; >$ps
trap 'rm -f $pr $ps; exit' 1 2 3 15

e plcmt.hex $x $y $z $r '|' plcmt.select $f "$ps" "$pr"
e plcmt.p2mat $s $a     $pr '>' "$R"
e plcmt.p2mat  1 $a     $ps '>' "$O"

rm -f $pr

# TEST: plcmt.ro.t0
# x=10 y=20 y=30 radius=1
# fraction=0.1
# sc=1 ang=0
# SEED=1234 plcmt.ro 10 20 30 $radius     $fraction    $sc $ang     solid.ic rbc.ic
# :
# (sort solid.ic; sort rbc.ic) > test.out.txt
#
